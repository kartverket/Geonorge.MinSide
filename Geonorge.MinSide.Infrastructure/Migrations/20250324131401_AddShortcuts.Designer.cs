// <auto-generated />
using System;
using Geonorge.MinSide.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Geonorge.MinSide.Infrastructure.Migrations
{
    [DbContext(typeof(OrganizationContext))]
    [Migration("20250324131401_AddShortcuts")]
    partial class AddShortcuts
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Geonorge.MinSide.Infrastructure.Context.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("OrganizationNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("FileName")
                        .IsUnique()
                        .HasFilter("[FileName] IS NOT NULL");

                    b.HasIndex("MeetingId");

                    b.HasIndex("Name");

                    b.HasIndex("OrganizationNumber");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("Geonorge.MinSide.Infrastructure.Context.InfoText", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("OrganizationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationNumber");

                    b.ToTable("InfoTexts");
                });

            modelBuilder.Entity("Geonorge.MinSide.Infrastructure.Context.Meeting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Conclusion")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OrganizationNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Date");

                    b.HasIndex("OrganizationNumber");

                    b.ToTable("Meetings");
                });

            modelBuilder.Entity("Geonorge.MinSide.Infrastructure.Context.Shortcut", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Username");

                    b.ToTable("Shortcuts");
                });

            modelBuilder.Entity("Geonorge.MinSide.Infrastructure.Context.ToDo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Deadline")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Done")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MeetingId")
                        .HasColumnType("int");

                    b.Property<int>("Number")
                        .HasColumnType("int");

                    b.Property<string>("OrganizationNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ResponsibleOrganization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Deadline");

                    b.HasIndex("MeetingId");

                    b.HasIndex("OrganizationNumber");

                    b.HasIndex("Status");

                    b.ToTable("Todo");
                });

            modelBuilder.Entity("Geonorge.MinSide.Infrastructure.Context.UserSettings", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Organization")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("TodoNotification")
                        .HasColumnType("bit");

                    b.Property<bool?>("TodoReminder")
                        .HasColumnType("bit");

                    b.Property<int?>("TodoReminderTime")
                        .HasColumnType("int");

                    b.HasKey("Username");

                    b.ToTable("UserSettings");
                });

            modelBuilder.Entity("Geonorge.MinSide.Infrastructure.Context.Document", b =>
                {
                    b.HasOne("Geonorge.MinSide.Infrastructure.Context.Meeting", null)
                        .WithMany("Documents")
                        .HasForeignKey("MeetingId");
                });

            modelBuilder.Entity("Geonorge.MinSide.Infrastructure.Context.ToDo", b =>
                {
                    b.HasOne("Geonorge.MinSide.Infrastructure.Context.Meeting", null)
                        .WithMany("ToDo")
                        .HasForeignKey("MeetingId");
                });

            modelBuilder.Entity("Geonorge.MinSide.Infrastructure.Context.Meeting", b =>
                {
                    b.Navigation("Documents");

                    b.Navigation("ToDo");
                });
#pragma warning restore 612, 618
        }
    }
}
