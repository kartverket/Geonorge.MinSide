<script type="text/x-template" id="dokdata-template">
    <div>
        <div v-if="items && visibleItems.length" class="list">
            <h3 v-on:click="expand($event)" class="section-title clickable">
                <span class="expand-arrow clickable" style="vertical-align: middle;" v-bind:class="{active: expanded}"></span>
                Det offentlige kartgrunnlaget ({{ filteredItems.length }}) <a v-bind:href="items.id + '?filterOrganization=' + items.owner" target="_blank" class="external-link">Se alle</a>
            </h3>
            <h6 class="tooManyHits" v-show="tooManyHits">For mange treff ({{ filteredItems.length }}). Prøv å begrense søket.</h6>
            <div v-show="expanded">
                <div class="list-header d-none d-md-block">
                    <div class="row">
                        <div class="col-md-6">
                            Navn
                        </div>
                        <div class="col-md-5">
                            Tema
                        </div>
                        <div class="col-md-1">
                            Status
                        </div>
                    </div>
                </div>
                <div class="list-content" v-bind:class="{'loading-data': loadingData}">
                    <div v-for="item in visibleItems" class="list-item">
                        <div class="row">
                            <div class="col-md-6">
                                <a v-bind:href="item.id" v-bind:title="'Vis detaljer for ' + item.label" target="_blank">{{item.label}} </a>
                            </div>
                            <div class="col-md-5">
                                <span class="d-inline-block d-md-none">Datasett</span>
                                {{item.theme}}
                            </div>
                            <div class="col-md-1">
                                <span class="d-inline-block d-md-none">Status</span>
                                <span v-bind:class="getClassname(item)">{{item.dokStatus}}</span>
                            </div>

                        </div>
                    </div>
                </div>
                <div class="text-center">
                    <button v-show="moreItemsAvailable" v-on:click="showMoreItems()" class="icon-button add-more-button" v-bind:class="loadingData ? 'fas fa-spinner fa-pulse' : 'fa fa-plus'"></button>
                </div>
            </div>
        </div>
    </div>
</script>

<script>
    var Dokdata = {
        name: "Dokdata",
        template: "#dokdata-template",
        data: function () {
            return {
                loadingData: false,
                expanded: true,
                items: null,
                filteredItems: [],
                visibleItems: [],
                visibleItemsCount: this.$root.VISIBLE_ITEMS,
                tooManyHits: false,
                filterProperties: [
                    'label',
                ]
            }
        },
        computed: {
            moreItemsAvailable: function () {
                return this.items && this.filteredItems.length > this.visibleItems.length;
            }
        },
        methods: {
            getItems: function () {
                var environmentParameter = this.$root.Environment;
                var organizationNameParameter = '?filterOrganization=' + this.$root.OrganizationNumber;
                var orderParameter = "&orderby=updated";
                var apiURL = "https://register." + environmentParameter + "geonorge.no/api/det-offentlige-kartgrunnlaget" + organizationNameParameter + "&limit=" + this.$root.LIMIT_MAX_VALUE + orderParameter;

                this.loadingData = true;

                return Promise.resolve(this.$root.getApiData(apiURL))
                    .then((apiData) => {
                        this.items = apiData;
                        this.loadingData = false;
                    });
            },

            filterItems: function (searchText) {
                this.filteredItems = this.items.containeditems.filter(item => {
                    return this.filterProperties.some(filterProperty => {
                        return item[filterProperty].toUpperCase().indexOf(searchText.toUpperCase()) > -1;
                    });
                });
            },

            showMoreItems: function () {
                this.visibleItems = this.filteredItems.slice(0, this.visibleItems.length + this.$root.VISIBLE_ITEMS);
                this.visibleItemsCount = this.visibleItems.length;
            },

            formatDate: function (date) {
                return date ? moment(date).format('DD.MM.YYYY') : undefined;
            },

            getClassname: function (v) {
                switch (v.dokStatus) {
                    case 'I prosess':
                        return 'prossess';
                    case 'Godkjent':
                        return 'godkjent';
                    case 'Forslag':
                        return 'forslag';
                    case 'Kandidat':
                        return 'kandidat';
                    default:
                        return '';
                }
            },

            expand: function (event) {
                if (event.target.nodeName !== "A") {
                    this.expanded = !this.expanded;
                }
            }
        },
        mounted: function () {
            this.getItems()
                .then(() => {
                    this.filteredItems = this.items.containeditems;
                    this.visibleItems = this.filteredItems.slice(0, this.$root.VISIBLE_ITEMS);
                });
        },
        watch: {
            '$root.searchText': function () {
                var searchText = this.$root.searchText.trim();
                this.filterItems(searchText);
                this.tooManyHits = false;

                if (searchText === '') {
                    this.visibleItems = this.items.containeditems.slice(0, this.visibleItemsCount);
                    return;
                }

                this.tooManyHits = this.filteredItems.length > this.$root.MAX_HITS;

                if (!this.tooManyHits) {
                    this.visibleItems = this.filteredItems;
                }
            }
        }
    };
</script>
